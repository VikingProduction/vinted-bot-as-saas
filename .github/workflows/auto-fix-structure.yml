name: Auto-Fix Vinted Bot Structure

on:
  workflow_dispatch:
    inputs:
      correction_type:
        description: 'Type de correction'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - scraping-merge
          - config-consolidation
          - celery-reorganization

env:
  CORRECTIONS_BRANCH: auto-fix-structure-${{ github.run_number }}

jobs:
  fix-structure:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Analyze Structure
        id: analyze
        run: |
          echo "Analyzing current structure..."
          
          SCRAPPING_EXISTS=$([ -d "backend/app/scrapping" ] && echo "true" || echo "false")
          CONFIG_DUPLICATES=$([ -f "backend/app/database.py" ] && [ -f "backend/app/db.py" ] && echo "true" || echo "false")
          
          echo "scrapping_exists=$SCRAPPING_EXISTS" >> $GITHUB_OUTPUT
          echo "config_duplicates=$CONFIG_DUPLICATES" >> $GITHUB_OUTPUT
          
          ISSUES_COUNT=0
          if [ "$SCRAPPING_EXISTS" = "true" ]; then
            ISSUES_COUNT=$((ISSUES_COUNT + 1))
            echo "Problem detected: Duplicate scrapping directory"
          fi
          if [ "$CONFIG_DUPLICATES" = "true" ]; then
            ISSUES_COUNT=$((ISSUES_COUNT + 1))
            echo "Problem detected: Duplicate config files"
          fi
          
          echo "issues_count=$ISSUES_COUNT" >> $GITHUB_OUTPUT
          echo "Total problems detected: $ISSUES_COUNT"
          
      - name: Create Branch
        if: steps.analyze.outputs.issues_count > 0
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          git checkout -b ${{ env.CORRECTIONS_BRANCH }}
          
      - name: Fix Scraping Directories
        if: steps.analyze.outputs.scrapping_exists == 'true'
        run: |
          echo "Fixing scraping directories..."
          
          mkdir -p backend/app/scraping
          
          if [ -f "backend/app/scrapping/vinted-scraper.py" ]; then
            mv backend/app/scrapping/vinted-scraper.py backend/app/scraping/vinted_scraper.py
            echo "Moved vinted-scraper.py to vinted_scraper.py"
          fi
          
          if [ -d "backend/app/scrapping" ]; then
            for file in backend/app/scrapping/*; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                new_filename=$(echo "$filename" | tr '-' '_')
                mv "$file" "backend/app/scraping/$new_filename"
                echo "Moved: $filename to $new_filename"
              fi
            done
            
            rm -rf backend/app/scrapping/
            echo "Removed scrapping directory"
          fi
          
          touch backend/app/scraping/__init__.py
          
          echo "Updating imports..."
          find backend/ -name "*.py" -type f -exec sed -i 's/from app\.scrapping/from app.scraping/g' {} + || true
          find backend/ -name "*.py" -type f -exec sed -i 's/import app\.scrapping/import app.scraping/g' {} + || true
          
          echo "Scraping directories fixed"
          
      - name: Fix Configuration
        if: steps.analyze.outputs.config_duplicates == 'true'
        run: |
          echo "Fixing configuration files..."
          
          mkdir -p backend/app/core
          
          if [ -f "backend/app/database.py" ] && [ -f "backend/app/db.py" ]; then
            DB_SIZE=$(wc -l < "backend/app/db.py" 2>/dev/null || echo "0")
            DATABASE_SIZE=$(wc -l < "backend/app/database.py" 2>/dev/null || echo "0")
            
            if [ "$DATABASE_SIZE" -ge "$DB_SIZE" ]; then
              mv backend/app/database.py backend/app/core/database.py
              rm -f backend/app/db.py
              echo "Kept database.py, removed db.py"
            else
              mv backend/app/db.py backend/app/core/database.py
              rm -f backend/app/database.py
              echo "Kept db.py as database.py, removed database.py"
            fi
          fi
          
          if [ -f "backend/app/config.py" ]; then
            mv backend/app/config.py backend/app/core/
          fi
          
          touch backend/app/core/__init__.py
          
          find backend/ -name "*.py" -type f -exec sed -i 's/from app\.database/from app.core.database/g' {} + || true
          find backend/ -name "*.py" -type f -exec sed -i 's/from app\.db/from app.core.database/g' {} + || true
          find backend/ -name "*.py" -type f -exec sed -i 's/from app\.config/from app.core.config/g' {} + || true
          
          echo "Configuration files fixed"
          
      - name: Fix Celery Organization
        if: inputs.correction_type == 'all' || inputs.correction_type == 'celery-reorganization'
        run: |
          echo "Organizing Celery files..."
          
          mkdir -p backend/app/tasks
          
          if [ -f "backend/app/celery-app.py" ]; then
            mkdir -p backend/app/core
            mv backend/app/celery-app.py backend/app/core/celery_app.py
            echo "Moved celery-app.py to core/celery_app.py"
          fi
          
          if [ -f "backend/app/scraping_task.py" ]; then
            mv backend/app/scraping_task.py backend/app/tasks/scraping.py
            echo "Moved scraping_task.py to tasks/scraping.py"
          fi
          
          echo '"""Celery tasks for Vinted Bot SaaS"""' > backend/app/tasks/__init__.py
          
          find backend/ -name "*.py" -type f -exec sed -i 's/from app\.celery_app/from app.core.celery_app/g' {} + || true
          find backend/ -name "*.py" -type f -exec sed -i 's/from app\.scraping_task/from app.tasks.scraping/g' {} + || true
          
          echo "Celery organization complete"
          
      - name: Create Frontend Structure
        run: |
          echo "Creating frontend structure..."
          
          mkdir -p frontend/src/hooks
          mkdir -p frontend/src/types
          mkdir -p frontend/src/utils
          mkdir -p frontend/src/stores
          
          if [ ! -f "frontend/src/types/index.ts" ]; then
            echo 'export interface User { id: string; email: string; name: string; }' > frontend/src/types/index.ts
          fi
          
          if [ ! -f "frontend/src/utils/index.ts" ]; then
            echo 'export const formatPrice = (price: number) => price.toFixed(2);' > frontend/src/utils/index.ts
          fi
          
          echo "Frontend structure created"
          
      - name: Generate Report
        if: steps.analyze.outputs.issues_count > 0
        run: |
          echo "Generating migration report..."
          
          cat > MIGRATION_REPORT.md << 'EOF'
# Migration Report - Vinted Bot SaaS

## Fixed Issues

### 1. Scraping Directory Merge
- Removed duplicate scrapping/ directory
- Moved files to scraping/ with snake_case naming
- Updated imports automatically

### 2. Configuration Consolidation
- Created core/ directory
- Merged database.py and db.py files
- Centralized configuration

### 3. Celery Reorganization
- Moved celery-app.py to core/celery_app.py
- Organized tasks in tasks/ directory
- Updated Celery imports

### 4. Frontend Structure
- Created types/, hooks/, utils/, stores/ directories
- Added basic TypeScript files

## New Structure

```
backend/app/
├── core/
│   ├── config.py
│   ├── database.py
│   └── celery_app.py
├── scraping/
│   ├── __init__.py
│   ├── vinted_client.py
│   └── vinted_scraper.py
├── tasks/
│   ├── __init__.py
│   └── scraping.py
└── ...

frontend/src/
├── components/
├── pages/
├── services/
├── lib/
├── hooks/
├── types/
├── utils/
└── stores/
```

## Post-Migration Checklist

- [ ] Run backend tests
- [ ] Run frontend tests
- [ ] Verify application starts
- [ ] Check all imports work
- [ ] Test core functionality

---
*Automatic migration completed*
EOF

          echo "Migration report generated"
          
      - name: Commit Changes
        if: steps.analyze.outputs.issues_count > 0
        run: |
          git add .
          git commit -m "Auto-fix: Structure corrections
          
          - Merged scraping/scrapping directories
          - Consolidated configuration in core/
          - Reorganized Celery files
          - Improved frontend structure
          - Updated imports automatically"
          
      - name: Push Changes
        if: steps.analyze.outputs.issues_count > 0
        run: |
          git push origin ${{ env.CORRECTIONS_BRANCH }}
          
      - name: Create Pull Request
        if: steps.analyze.outputs.issues_count > 0
        uses: repo-sync/pull-request@v2
        with:
          source_branch: ${{ env.CORRECTIONS_BRANCH }}
          destination_branch: main
          pr_title: "Auto-fix: Structure corrections for Vinted Bot SaaS"
          pr_body: |
            ## Automatic Structure Corrections
            
            This PR contains automatic fixes for structure issues detected in the project.
            
            ### Changes Made:
            
            - **Merged scraping/scrapping**: Unified directories with proper naming
            - **Consolidated configuration**: Grouped config files in core/
            - **Reorganized Celery**: Properly structured tasks
            - **Improved frontend**: Added missing TypeScript directories
            - **Updated imports**: Automatically corrected all import statements
            
            ### Verification Needed:
            
            - [ ] Backend tests pass
            - [ ] Frontend tests pass
            - [ ] Application starts correctly
            - [ ] No broken imports
            
            See MIGRATION_REPORT.md for detailed changes.
            
            ---
            *Generated by GitHub Actions*
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Summary
        if: always()
        run: |
          echo "Migration Summary:" >> $GITHUB_STEP_SUMMARY
          echo "- Problems detected: ${{ steps.analyze.outputs.issues_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- Correction type: ${{ inputs.correction_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch created: ${{ env.CORRECTIONS_BRANCH }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.analyze.outputs.issues_count }}" -gt "0" ]; then
            echo "- Pull Request: Created automatically" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Pull Request: No changes needed" >> $GITHUB_STEP_SUMMARY
          fi
