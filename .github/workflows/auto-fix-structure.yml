name: üõ†Ô∏è Auto-Fix Vinted Bot Structure

on:
  workflow_dispatch:
    inputs:
      correction_type:
        description: 'Type de correction √† effectuer'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - scraping-merge
          - config-consolidation
          - celery-reorganization
          - frontend-structure
      create_pr:
        description: 'Cr√©er une Pull Request automatiquement'
        required: true
        default: true
        type: boolean
      target_branch:
        description: 'Branche cible pour la PR'
        required: true
        default: 'main'
        type: string

env:
  CORRECTIONS_BRANCH: auto-fix/structure-corrections-${{ github.run_number }}

jobs:
  analyze-and-fix:
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: üîß Install Dependencies
        run: |
          pip install --upgrade pip
          npm install -g prettier
          
      - name: üîç Analyze Current Structure
        id: analyze
        run: |
          echo "üîç Analyse de la structure actuelle..."
          
          SCRAPING_EXISTS=$([ -d "backend/app/scraping" ] && echo "true" || echo "false")
          SCRAPPING_EXISTS=$([ -d "backend/app/scrapping" ] && echo "true" || echo "false")
          CONFIG_DUPLICATES=$([ -f "backend/app/database.py" ] && [ -f "backend/app/db.py" ] && echo "true" || echo "false")
          
          echo "scraping_exists=$SCRAPING_EXISTS" >> $GITHUB_OUTPUT
          echo "scrapping_exists=$SCRAPPING_EXISTS" >> $GITHUB_OUTPUT
          echo "config_duplicates=$CONFIG_DUPLICATES" >> $GITHUB_OUTPUT
          
          ISSUES_COUNT=0
          if [ "$SCRAPPING_EXISTS" = "true" ]; then
            ISSUES_COUNT=$((ISSUES_COUNT + 1))
            echo "‚ùå Probl√®me d√©tect√©: Dossier scrapping en double"
          fi
          if [ "$CONFIG_DUPLICATES" = "true" ]; then
            ISSUES_COUNT=$((ISSUES_COUNT + 1))
            echo "‚ùå Probl√®me d√©tect√©: Fichiers de config dupliqu√©s"
          fi
          
          echo "issues_count=$ISSUES_COUNT" >> $GITHUB_OUTPUT
          echo "üìä Nombre total de probl√®mes d√©tect√©s: $ISSUES_COUNT"
          
      - name: üåø Create Corrections Branch
        if: steps.analyze.outputs.issues_count > 0
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          git checkout -b ${{ env.CORRECTIONS_BRANCH }}
          
      - name: üîß Fix 1 - Merge Scraping Directories
        if: (inputs.correction_type == 'all' || inputs.correction_type == 'scraping-merge') && steps.analyze.outputs.scrapping_exists == 'true'
        run: |
          echo "üîß Correction 1: Fusion des dossiers scraping/scrapping"
          
          mkdir -p backend/app/scraping
          
          if [ -f "backend/app/scrapping/vinted-scraper.py" ]; then
            mv backend/app/scrapping/vinted-scraper.py backend/app/scraping/vinted_scraper.py
            echo "‚úÖ vinted-scraper.py ‚Üí vinted_scraper.py"
          fi
          
          if [ -d "backend/app/scrapping" ]; then
            for file in backend/app/scrapping/*; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                new_filename=$(echo "$filename" | sed 's/-/_/g')
                mv "$file" "backend/app/scraping/$new_filename"
                echo "‚úÖ D√©plac√©: $filename ‚Üí $new_filename"
              fi
            done
            
            rm -rf backend/app/scrapping/
            echo "‚úÖ Dossier scrapping supprim√©"
          fi
          
          touch backend/app/scraping/__init__.py
          
          echo "üîÑ Mise √† jour des imports..."
          find backend/ -name "*.py" -type f -exec sed -i 's/from app\.scrapping/from app.scraping/g' {} + || true
          find backend/ -name "*.py" -type f -exec sed -i 's/import app\.scrapping/import app.scraping/g' {} + || true
          
          echo "‚úÖ Fusion des dossiers scraping termin√©e"
          
      - name: üîß Fix 2 - Consolidate Configuration
        if: (inputs.correction_type == 'all' || inputs.correction_type == 'config-consolidation') && steps.analyze.outputs.config_duplicates == 'true'
        run: |
          echo "üîß Correction 2: Consolidation de la configuration"
          
          mkdir -p backend/app/core
          
          if [ -f "backend/app/database.py" ] && [ -f "backend/app/db.py" ]; then
            echo "‚ö†Ô∏è Fusion n√©cessaire pour database.py et db.py"
            
            DB_SIZE=$(wc -l < "backend/app/db.py" 2>/dev/null || echo "0")
            DATABASE_SIZE=$(wc -l < "backend/app/database.py" 2>/dev/null || echo "0")
            
            if [ "$DATABASE_SIZE" -ge "$DB_SIZE" ]; then
              mv backend/app/database.py backend/app/core/database.py
              rm -f backend/app/db.py
              echo "‚úÖ Gard√© database.py, supprim√© db.py"
            else
              mv backend/app/db.py backend/app/core/database.py
              rm -f backend/app/database.py  
              echo "‚úÖ Gard√© db.py renomm√© en database.py, supprim√© database.py"
            fi
          elif [ -f "backend/app/database.py" ]; then
            mv backend/app/database.py backend/app/core/
          elif [ -f "backend/app/db.py" ]; then
            mv backend/app/db.py backend/app/core/database.py
          fi
          
          if [ -f "backend/app/config.py" ]; then
            mv backend/app/config.py backend/app/core/
          fi
          
          if [ -f "backend/app/proxy-manager.py" ]; then
            mv backend/app/proxy-manager.py backend/app/scraping/proxy_manager.py
          fi
          
          touch backend/app/core/__init__.py
          
          find backend/ -name "*.py" -type f -exec sed -i 's/from app\.database/from app.core.database/g' {} + || true
          find backend/ -name "*.py" -type f -exec sed -i 's/from app\.db/from app.core.database/g' {} + || true
          find backend/ -name "*.py" -type f -exec sed -i 's/from app\.config/from app.core.config/g' {} + || true
          
          echo "‚úÖ Configuration consolid√©e"
          
      - name: üîß Fix 3 - Reorganize Celery
        if: inputs.correction_type == 'all' || inputs.correction_type == 'celery-reorganization'
        run: |
          echo "üîß Correction 3: R√©organisation Celery"
          
          mkdir -p backend/app/tasks
          
          if [ -f "backend/app/celery-app.py" ]; then
            mv backend/app/celery-app.py backend/app/core/celery_app.py
            echo "‚úÖ celery-app.py ‚Üí core/celery_app.py"
          fi
          
          if [ -f "backend/app/scraping_task.py" ]; then
            mv backend/app/scraping_task.py backend/app/tasks/scraping.py
            echo "‚úÖ scraping_task.py ‚Üí tasks/scraping.py"
          fi
          
          if [ ! -f "backend/app/tasks/__init__.py" ]; then
            cat > backend/app/tasks/__init__.py << 'INIT_CONTENT'
"""
T√¢ches Celery pour le bot Vinted SaaS
"""

from .scraping import *

__all__ = ['scraping']
INIT_CONTENT
          fi
          
          find backend/ -name "*.py" -type f -exec sed -i 's/from app\.celery_app/from app.core.celery_app/g' {} + || true
          find backend/ -name "*.py" -type f -exec sed -i 's/from app\.scraping_task/from app.tasks.scraping/g' {} + || true
          
          echo "‚úÖ Celery r√©organis√©"
          
      - name: üîß Fix 4 - Frontend Structure
        if: inputs.correction_type == 'all' || inputs.correction_type == 'frontend-structure'
        run: |
          echo "üîß Correction 4: Structure frontend"
          
          mkdir -p frontend/src/hooks
          mkdir -p frontend/src/types  
          mkdir -p frontend/src/utils
          mkdir -p frontend/src/stores
          
          if [ ! -f "frontend/src/types/index.ts" ]; then
            cat > frontend/src/types/index.ts << 'TYPES_CONTENT'
// Types globaux pour l'application Vinted Bot SaaS

export interface User {
  id: string;
  email: string;
  name: string;
  subscription?: Subscription;
}

export interface VintedFilter {
  id: string;
  name: string;
  criteria: FilterCriteria;
  isActive: boolean;
  userId: string;
}

export interface FilterCriteria {
  brand?: string;
  category?: string;
  minPrice?: number;
  maxPrice?: number;
  size?: string;
  condition?: string;
}

export interface Subscription {
  id: string;
  plan: 'starter' | 'pro' | 'business';
  status: 'active' | 'inactive' | 'cancelled';
  currentPeriodEnd: string;
}

export interface Alert {
  id: string;
  filterId: string;
  itemUrl: string;
  itemTitle: string;
  itemPrice: number;
  createdAt: string;
}
TYPES_CONTENT
          fi
          
          if [ ! -f "frontend/src/utils/index.ts" ]; then
            cat > frontend/src/utils/index.ts << 'UTILS_CONTENT'
// Utilitaires pour l'application

export const formatPrice = (price: number): string => {
  return new Intl.NumberFormat('fr-FR', {
    style: 'currency',
    currency: 'EUR'
  }).format(price);
};

export const formatDate = (date: string): string => {
  return new Intl.DateTimeFormat('fr-FR', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  }).format(new Date(date));
};
UTILS_CONTENT
          fi
          
          echo "‚úÖ Structure frontend cr√©√©e"
          
      - name: üé® Format Code
        if: steps.analyze.outputs.issues_count > 0
        run: |
          echo "üé® Formatage du code..."
          
          if command -v black &> /dev/null; then
            black backend/ --line-length 88 --target-version py311 || true
          fi
          
          if [ -d "frontend/src" ]; then
            prettier --write "frontend/src/**/*.{ts,tsx,js,jsx,json,css,md}" || true
          fi
          
          echo "‚úÖ Code format√©"
          
      - name: üìù Generate Migration Report
        if: steps.analyze.outputs.issues_count > 0
        run: |
          cat > MIGRATION_REPORT.md << 'REPORT_CONTENT'
# üõ†Ô∏è Rapport de migration automatique - Vinted Bot SaaS

## Corrections appliqu√©es

### ‚úÖ Probl√®mes r√©solus

1. **Fusion des dossiers scraping/scrapping**
   - Dossier `scrapping/` supprim√©
   - Fichiers d√©plac√©s vers `scraping/` avec convention snake_case
   - Imports mis √† jour automatiquement

2. **Consolidation de la configuration**
   - Cr√©ation du dossier `core/`
   - Fusion des fichiers `database.py` et `db.py`
   - Centralisation de la configuration

3. **R√©organisation Celery**
   - `celery-app.py` ‚Üí `core/celery_app.py`
   - T√¢ches organis√©es dans `tasks/`
   - Imports Celery mis √† jour

4. **Structure frontend am√©lior√©e**
   - Dossiers `types/`, `hooks/`, `utils/`, `stores/` cr√©√©s
   - Fichiers de base TypeScript ajout√©s

### üìÅ Nouvelle structure

```
backend/app/
‚îú‚îÄ‚îÄ core/              # Configuration centralis√©e
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ config.py
‚îÇ   ‚îú‚îÄ‚îÄ database.py
‚îÇ   ‚îî‚îÄ‚îÄ celery_app.py
‚îú‚îÄ‚îÄ scraping/          # Moteur de scraping unifi√©
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ vinted_client.py
‚îÇ   ‚îú‚îÄ‚îÄ vinted_scraper.py
‚îÇ   ‚îî‚îÄ‚îÄ proxy_manager.py
‚îú‚îÄ‚îÄ tasks/             # T√¢ches Celery organis√©es
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îî‚îÄ‚îÄ scraping.py
‚îî‚îÄ‚îÄ ... (autres dossiers inchang√©s)
```

### ‚ö†Ô∏è Actions requises

1. **V√©rifier les tests** : Relancer la suite de tests apr√®s migration
2. **Contr√¥ler les imports** : V√©rifier que tous les imports sont correctement mis √† jour
3. **Tester l'application** : S'assurer que l'application d√©marre correctement

### üìã Checklist post-migration

- [ ] Tests backend passent
- [ ] Tests frontend passent  
- [ ] Application d√©marre sans erreur
- [ ] Imports correctement mis √† jour
- [ ] Configuration centralis√©e fonctionnelle

---
*Migration automatique g√©n√©r√©e*
REPORT_CONTENT

          echo "‚úÖ Rapport de migration g√©n√©r√©"
          
      - name: üì§ Commit Changes
        if: steps.analyze.outputs.issues_count > 0
        run: |
          git add .
          git commit -m "üõ†Ô∏è Auto-fix: Structure corrections
          
          ‚úÖ Corrections appliqu√©es:
          - Fusion scraping/scrapping ‚Üí scraping/
          - Configuration consolid√©e dans core/
          - Celery r√©organis√©
          - Structure frontend am√©lior√©e
          - Imports mis √† jour automatiquement
          
          ü§ñ Migration automatique via GitHub Actions"
          
      - name: üì§ Push Changes
        if: steps.analyze.outputs.issues_count > 0
        run: |
          git push origin ${{ env.CORRECTIONS_BRANCH }}
          
      - name: üîÑ Create Pull Request
        if: inputs.create_pr && steps.analyze.outputs.issues_count > 0
        uses: repo-sync/pull-request@v2
        with:
          source_branch: ${{ env.CORRECTIONS_BRANCH }}
          destination_branch: ${{ inputs.target_branch }}
          pr_title: "üõ†Ô∏è Auto-fix: Corrections structure Vinted Bot SaaS"
          pr_body: |
            ## ü§ñ Corrections automatiques appliqu√©es
            
            Cette PR contient des corrections automatiques pour r√©soudre les probl√®mes de structure d√©tect√©s dans le projet.
            
            ### ‚úÖ Corrections effectu√©es:
            
            - **Fusion scraping/scrapping** : Dossiers fusionn√©s avec convention de nommage coh√©rente
            - **Configuration consolid√©e** : Fichiers de config regroup√©s dans `core/`
            - **Celery r√©organis√©** : T√¢ches correctement organis√©es
            - **Structure frontend** : Dossiers TypeScript standardis√©s
            - **Imports automatiquement mis √† jour**
            
            ### üìã √Ä v√©rifier avant merge:
            
            - [ ] Tests backend passent
            - [ ] Tests frontend passent
            - [ ] Application d√©marre correctement
            - [ ] Aucun import cass√©
            
            ### üìÑ D√©tails
            
            Voir le fichier `MIGRATION_REPORT.md` pour plus de d√©tails sur les corrections appliqu√©es.
            
            ---
            ü§ñ *Corrections automatiques g√©n√©r√©es par GitHub Actions*
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: üìä Summary
        if: always()
        run: |
          echo "## üìä R√©sum√© de la migration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Probl√®mes d√©tect√©s**: ${{ steps.analyze.outputs.issues_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type de correction**: ${{ inputs.correction_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branche cr√©√©e**: ${{ env.CORRECTIONS_BRANCH }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ inputs.create_pr }}" = "true" ] && [ "${{ steps.analyze.outputs.issues_count }}" -gt "0" ]; then
            echo "- **Pull Request**: ‚úÖ Cr√©√©e automatiquement" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Pull Request**: ‚ùå Non cr√©√©e" >> $GITHUB_STEP_SUMMARY  
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Prochaines √©tapes" >> $GITHUB_STEP_SUMMARY
          echo "1. Reviewer la Pull Request cr√©√©e" >> $GITHUB_STEP_SUMMARY
          echo "2. Tester l'application apr√®s migration" >> $GITHUB_STEP_SUMMARY
          echo "3. Merger apr√®s validation" >> $GITHUB_STEP_SUMMARY
